# -*- coding: utf-8 -*-
"""0723-histogram_equalization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5zc5dpJiSXFKhdkh_-zCXxTr_2M7uFu
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np

inImage = cv2.imread(".\\0723\\lena_in.bmp")
# if image has rgb channel, cv2 default color channel is BGR instead of RGB,
# so display image that cv2.imread using plt will look blue.
# convert the channel is necessary.
# cnvInImg = cv2.cvtColor(inImage, cv2.COLOR_BGR2RGB)

inHist = cv2.calcHist(inImage, [0], None, [256], [0, 256])
inHist = inHist.reshape(256)

histogram = np.zeros((256), dtype=float)

for row in range(inImage.shape[0]):
    for col in range(inImage.shape[1]):
        gValue = inImage[row, col]
        histogram[gValue] = histogram[gValue] + 1

for i in range(256):
    histogram[i] = histogram[i]/(inImage.shape[0] * inImage.shape[1])


accHist = np.zeros(256, dtype=float)

for i in range(255):
    accHist[i+1] = accHist[i]+histogram[i]

T = np.zeros(256, dtype=int)

# T[gValue] is equal to T(r) in math,
# T is a convert functon and r is original luminance,
# using array's index as original luminance,
# its value as new value.
for i in range(len(accHist)):
    T[i] = int(accHist[i] * 255)

outImage = np.zeros(inImage.shape, dtype=np.uint8)

for row in range(outImage.shape[0]):
    for col in range(outImage.shape[1]):
        gValue = inImage[row, col]
        outValue = T[gValue]
        outImage[row, col] = outValue

outHist = cv2.calcHist(outImage, [0], None, [256], [0, 256])
outHist = outHist.reshape(256)

fig, ax = plt.subplots(2, 2)

ax[0, 0].imshow(inImage)
ax[0, 1].imshow(outImage)
ax[1, 0].bar(range(inHist.shape[0]), inHist)
ax[1, 1].bar(range(outHist.shape[0]), outHist)

plt.show()
